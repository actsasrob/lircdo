var https = require('https');
var fs = require('fs');    

var cacertificate = fs.readFileSync('./sslcert/cacert.pem');
//var cacertificate = fs.readFileSync('./sslcert/fullchain.pem');
var certificate = fs.readFileSync('./sslcert/servercert.pem');

var theOptions = {
    host: 'lirc.example.com',
    port: 8845, 
    path: '/',
    ca: [cacertificate],
    cert: [certificate],
    //rejectUnauthorized: false,
    timeout: 1000,
};

function httpGet(options) {
        return new Promise(((resolve, reject) => {
                const request = https.request(options, (response) => {
                        response.setEncoding('utf8');
                        let returnData = '';

                        if (response.statusCode < 200 || response.statusCode >= 300) {
                                return reject(new Error(`${response.statusCode}: ${response.req.getHeader('host')} ${response.req.path}`));
                        }

                        response.on('data', (chunk) => {
                                returnData += chunk;
                        });

                        response.on('end', () => {
                                resolve(JSON.parse(returnData));
                        });

                        response.on('error', (error) => {
                                reject(error);
                        });

                        response.on('timeout', (error) => {
                                reject(error);
                        });
                });
                // use its "timeout" event to abort the request
                request.on('timeout', () => {
                    console.log('in httpGet: request timed out. aborting request');
                    reject(new Error("timeout123"));
                    request.abort();
                });
                request.end();
        }));
}

async function doHttpGet(options) {
let outputSpeech = "got here";

               try {
                        const response = await httpGet(options);

                        console.log(`CompletedPairServerIntent.handler: response: ${JSON.stringify(response)}`);
                        if (response.status !== 'success') {
                                outputSpeech = `Pairing was not successful. The server-side application returned message ${response.message}`;
                        } else {
                                outputSpeech = 'The server-side LIRC Do application has been paired successfully. You should now restart the server-side LIRC Do application in non-pairing mode.';
                                console.log(`CompletedPairServerIntent.handler: after await`);
                        }
                } catch (error) {
                        outputSpeech = `Sorry, there was a problem performing the requested action. error is ${JSON.stringify(error)}`;
                        console.log(`catch error: ${JSON.stringify(error)}`);
                        // handle the special case where the LIRC Do service was probably not started in pairing mode
                        if (error.message.match(/404:/)) {
                                outputSpeech = `Sorry, there was a problem pairing with the LIRC Do service. Please ensure the LIRC Do service is started in pairing mode and try again`;
                        }
                }

console.log(outputSpeech);

}

doHttpGet(theOptions);

//https.request(options, function(res) {
//    res.pipe(process.stdout);
//}).end();
